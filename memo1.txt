# 버전(Version)
-특정 시점에서의 파일 상태를 의미

## 버전의 이해
1. 일상생활 예시(워드 문서 작성시)
-초안.doc
-수정본.doc
-최종본.doc
-이때 각각의 파일이 하나의 '버전'
2. 개발에서의 버전
-소스코드의 특정 시점 상태
-기능이 추가될 때마다의 상태

## 버전 번호 체계(참고)
1. 일반적인 버전 번호
-x.y.z 형식(예 : 1.0.0)
-x : 주 버전(Major) - 큰 변화
-y : 부 버전(Minor) - 기능 추가
-z : 수 버전(Patch)  -버그 수정
2. 버전 상태 표현
-alpha : 초기 개발 버전
-beta : 모드 기능 구현이 끝난 테스트
-RC(Release Candidate) : 대부분의 버그 수정이 끝난 출시 후보 버전
-stable  : 정식 출시되는 안정화 버전

# 버전 관리
- 파일의 변경 사항을 시간에 따라 기록, 관리하는 것
- 언제, 무엇이, 누가, 왜 변경했는지를 기록

# 버전 관리 시스템(Version Control System, VCS)
- 파일이 언제, 어떻게 바뀌었는지 기록하는 프로그램
- 마치 타임머신처럼 과거의 특정 버전으로 돌아갈 수 있음
- 쉽게 말하면 작업 내용을 저장하고 관리하는 도구

## 버전 관리가 필요한 이유
1. 변경 이력 관리
   - 언제, 무엇을, 누가, 왜 변경했는지 기록
   - 문제 발생시 이전 버전으로 복원 가능
2. 백업 
   - 로컬 파일 손실 시 복구 가능

# Git과 GitHub
## Git
- 버전 관리 시스템(VSC)
- 로컬 컴퓨터(내 컴퓨터)에서 작동하는 프로그램

## GitHub
- Git이 관리하는 버전 기록을 공유할 수 있는 웹사이트
- 구글 드라이브처럼 개인 사용자가 이용할 수 있는 저장소를 제공
- 저장소에 파일을 업로드하거나 다운받을 수 있음

# git 설치하기
1. 설치 파일 다운
   - git 공식 사이트 접속
   - 다운로드 메뉴에서 운영체제에 맞는 버전 다운로드
2. 설치 과정 주요 옵션
-git bash here(필수)
-기본 브랜치명 'main' 설정
-텍스트 에디터(기본:vim)

# git 초기 설정
1. 사용자 정보 설정(필수)
- 이름과 이메일 설정(깃 배쉬에서 진행할 것)
- 모든 버전 내역에 이 정보가 사용됨(누가 언제 수정됐는지)
- 우리는 깃허브와 함께 사용하므로 깃허브 사이트의 계정명과 이메일을 등록해야한다.

## git 초기 설정 관련 명령어

1. `git --version`
   - Git 설치 여부와 버전을 확인하는 명령어
   - Git이 정상적으로 설치되었는지 확인할 때 사용
2. `git config --global user.name "YourName"`
   - Git 사용자 이름을 전역으로 설정
   - 모든 Git 저장소에서 사용할 사용자 이름 지정(중요)
3. `git config --global user.email "your.email@example.com"`
   - Git 사용자 이메일을 전역으로 설정
   - 모든 Git 저장소에서 사용할 이메일 주소 지정(중요)
4. `git config --global init.defaultBranch main`
   - Git 저장소 생성 시 기본 브랜치명을 'main'으로 설정
   - 최근에는 'master' 대신 'main' 사용을 권장
5. `git config --list`
   - 현재 Git의 모든 설정 확인
   - 전역 설정과 지역 설정 모두 표시
6. `git config user.name`
   - 현재 설정된 사용자 이름만 확인
7. `git config user.email`
   - 현재 설정된 이메일 주소만 확인

# Git의 3가지 영역
1. Working Directory(작업 디렉토리)
- 실제 작업하는 공간(실제 내 폴더)
-  파일을 생성, 수정, 삭제하는 곳
- Git이 변경사항을 추적하지 않는 상태
-git add 명령어로 파일을 스테이징 영역으로 이동시킬 수 있음
2. Staging Area(스테이징 영역)
- 커밋할 파일들을 선별하는 공간
- 변경사항을 커밋하기 전[임시 저장소]
- 스테이징 영역에 올라온 파일들은 Git이 변경사항을 추적하기 시작함
- git commit 명령어로 파일을 로컬 레파지토리로 이동시킬 수 있음
3. Local Repository(내 컴퓨터 저장소, .git 폴더)
- 하나의 완성된 버전이 저장되는 공간
- 버전을 저장하는 [영구 저장소]
- 과거의 버전 기록을 모두 저장/관리
- .git 디렉토리에 실제 버전 정보가 저장됨(.git을 삭제하면 기록 모두 사라짐)

# 파일의 상태
1. Untracked(추적 안됨)
- Git이 관리하지 않는 파일
- 새로 생성된 파일은 Untracked 상태가 됨
2. Tracked(추적됨)
- Git이 관리하는 파일
- 스테이징 영역으로 넘어간 파일은 Tracked 상태가 됨
-Tracked 상태의 종류
   - Unmodified(수정 없음) : 마지막 커밋과 동일한 상태
   - Modified(수정됨) : 마지막 커밋과 다른 상태
   - Staged(스테이징됨) : 커밋할 준비가 된 상태
--------------------------------------------------------------------------
# Git 기본 명령어
- Git Bash는 CLI(Command Line Interface)이다.
- CLI는 모든 동작을 명령어를 작성해 실행한다.
- git과 관련된 모든 명령어는 git으로 시작한다.


1. `git init`
   - 현재 Working Directory를 Git 저장소로 초기화
   - .git 폴더가 생성됨
   - 처음 세팅할 때 한 번만 실행!
2. `git status`
   - 현재 Git 상태를 확인하는 명령어
   - 파일들의 상태를 보여줌:
     - Untracked files: 추적되지 않는 파일
     - Changes not staged: Modified 상태의 파일
     - Changes to be committed: Staged 상태의 파일
3. `git add 파일명`
   - 특정 파일을 Staging Area로 이동
   - 파일이 Tracked(추적) 상태가 됨
   - 주요 사용법 :
     - `git add 파일명` : 특정 파일만 스테이징
     - `git add .` : 현재 폴더의 모든 파일을 스테이징
     - `git add 폴더명` : 특정 폴더의 모든 파일을 스테이징
     - `git add *.txt` : 특정 확장자 파일만 스테이징
4. `git commit -m "커밋 메세지"`
   - Staging Area의 파일들을 Repository에 저장
   - 하나의 버전이 생성되는 것!
   - -m : 커밋 메세지를 작성하는 옵션
   - 커밋 메세지는 무엇을 어떻게 변경했는지 알아보기 쉽게 작성해야 함.
5. `git diff`
   - 파일의 변경사항을 비교하는 명령어
   - 주요 사용법:
     - `git diff` : Working Directory의 변경사항 확인 (Staged 제외)
     - `git diff --staged` : Staging Area의 변경사항 확인
   - 출력 내용:
     - `+` : 추가된 줄
     - `-` : 삭제된 줄
     - 변경된 부분 주변 코드도 함께 표시

# 상태 변화 과정

```
새 파일 생성 → [Untracked]
    │
    ▼
git add → [Staged]
    │
    ▼
git commit → [Unmodified]
    │
파일 수정 → [Modified]
    │
    ▼
git add → [Staged]
```

- 스테이징한 파일을 수정하면 수정 상태가 된다.
- 수정 상태의 경우 Commit의 대상이 아니다.
- 수정 내용을 반영하여 Commit하고 싶다면 다시 `git add`로 스태이징 상태로 변경해야 한다.